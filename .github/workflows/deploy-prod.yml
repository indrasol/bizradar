name: Build and Deploy to bizradarv1 Azure Web App

on:
  push:
    branches: [ dev, main ]
  workflow_dispatch:

env:
  # Match your ACR name and Azure Web App name
  ACR_NAME: securetrack
  WEBAPP_NAME: bizradarv1
  RG_NAME: RG-EU-STB-PRD-01
  IMAGE_NAME: biz_backend

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout the repo
      - name: "Checkout GitHub repository"
        uses: actions/checkout@v4

      # 2) Login to Azure using the service principal
      - name: "Login to Azure"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # 3) Set up Docker Buildx (for multi-arch builds, but standard works too)
      # - name: "Set up Docker Buildx"
      #   uses: docker/setup-buildx-action@v2

      # 3) Setup buildx
      - uses: docker/setup-buildx-action@v3

      # 4) Log in to ACR
      - name: "Log in to ACR"
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Fetch ACR loginServer
        id: acr
        run: |
          echo "LOGIN_SERVER=$(az acr show --name ${{ env.ACR_NAME }} \
                            --query loginServer --output tsv)" >> $GITHUB_ENV

      - name: Decide slot, tag and ENV
        id: decide
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "SLOT=" >> $GITHUB_OUTPUT
            echo "TAG=prod-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            echo "SLOT=dev" >> $GITHUB_OUTPUT
            echo "TAG=dev-${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

      # 5) Build the Docker image and push to ACR
      - name: Build & push amd64 image
        run: |
          docker buildx build \
            --pull --no-cache \
            --platform linux/amd64 \
            --push \
            --tag $LOGIN_SERVER/${{ env.IMAGE_NAME }}:${{ steps.decide.outputs.TAG }} \
            --file Dockerfile \
            .

      # 6) Deploy the new image to Azure Web App
      - name: "Deploy to Azure Web App / slot"
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          slot-name: ${{ steps.decide.outputs.SLOT }}
          # images: ${{ env.ACR_NAME }}-dzc8a3deejhje7d4.azurecr.io/${{ env.IMAGE_NAME }}:latest
          images: ${{ env.LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ steps.decide.outputs.TAG }}
